// app/add-transaction.js
import { Stack, useRouter } from 'expo-router';
import { onValue, ref } from 'firebase/database'; // Import c√°c h√†m Firebase c·∫ßn thi·∫øt
import { useEffect, useState } from 'react'; // Th√™m useState v√† useEffect
import {
  ActivityIndicator,
  Alert,
  Platform,
  SafeAreaView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View, // Th√™m View
} from 'react-native';
import AddTransactionUI from '../components/AddTransactionUI'; // Gi·∫£ s·ª≠ ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng
import { database } from '../firebaseConfig'; // ƒê·∫£m b·∫£o firebaseConfig ƒë∆∞·ª£c import

export default function AddTransactionScreenRoute() {
  const router = useRouter();
  const [selectedCategoryDetails, setSelectedCategoryDetails] = useState(null);

  // States cho vi·ªác l·∫•y d·ªØ li·ªáu danh m·ª•c chi ti√™u t·ª´ Firebase
  const [expenseCats, setExpenseCats] = useState([]);
  const [incomeCats, setIncomeCats] = useState([ // d·ªØ li·ªáu tƒ©nh t·∫°m th·ªùi 
    { id: 'salary', name: 'L∆∞∆°ng', icon: 'üí∞' },
    { id: 'bonus', name: 'Th∆∞·ªüng', icon: 'üèÜ' },
    { id: 'gift_in', name: 'ƒê∆∞·ª£c t·∫∑ng', icon: 'üíù'},
    { id: 'freelance', name: 'L√†m th√™m', icon: 'üßë‚Äçüíª'},
    { id: 'investment', name: 'ƒê·∫ßu t∆∞', icon: 'üìà'},
    { id: 'other_income', name: 'Thu nh·∫≠p kh√°c', icon: 'üí∏'},
  ]);
  const [loadingExpenses, setLoadingExpenses] = useState(true);
  const [errorExpenses, setErrorExpenses] = useState(null);

  useEffect(() => {
    // Tham chi·∫øu ƒë·∫øn node 'categories' trong Firebase Realtime Database
    const categoriesRef = ref(database, 'categories');

    const unsubscribeExpenses = onValue(categoriesRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const categoriesArray = Object.keys(data)
          .map(key => ({
            id: key,
            name: data[key].name,
            icon: data[key].icon,
          }))
          .filter(category => category.id !== 'add'); // Lo·∫°i b·ªè n√∫t 'add' n·∫øu c√≥ trong DB

        setExpenseCats(categoriesArray);
        setErrorExpenses(null);
      } else {
        setExpenseCats([]);
        // B·∫°n c√≥ th·ªÉ ƒë·∫∑t setErrorExpenses("Kh√¥ng t√¨m th·∫•y danh m·ª•c chi ti√™u.") n·∫øu mu·ªën
      }
      setLoadingExpenses(false);
    }, (error) => {
      console.error("L·ªói khi l·∫•y danh m·ª•c chi ti√™u t·ª´ Firebase: ", error);
      setErrorExpenses("Kh√¥ng th·ªÉ t·∫£i danh m·ª•c chi ti√™u. Vui l√≤ng th·ª≠ l·∫°i.");
      setLoadingExpenses(false);
    });

    // H·ªßy l·∫Øng nghe khi component unmount
    return () => {
      unsubscribeExpenses();
    };
  }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o useEffect ch·ªâ ch·∫°y m·ªôt l·∫ßn

  const handleCategorySelect = (categoryDetails) => {
    console.log('ƒê√£ ch·ªçn danh m·ª•c:', categoryDetails);
    setSelectedCategoryDetails(categoryDetails);
  };

  const handleNewCategoryPress = (details) => {
    console.log('Y√™u c·∫ßu th√™m danh m·ª•c m·ªõi cho:', details.type);
    router.push({ pathname: '/category-settings', params: { type: details.type } });
  };

  // Ch·ª©c nƒÉng l∆∞u giao d·ªãch (v√≠ d·ª•)
  const handleSaveTransaction = () => {
    if (!selectedCategoryDetails) {
      Alert.alert('Ch∆∞a ch·ªçn danh m·ª•c', 'Vui l√≤ng ch·ªçn m·ªôt danh m·ª•c tr∆∞·ªõc khi l∆∞u.');
      return;
    }
    console.log('L∆∞u giao d·ªãch v·ªõi chi ti·∫øt:', selectedCategoryDetails);
    // Th√™m logic l∆∞u tr·ªØ th·ª±c t·∫ø ·ªü ƒë√¢y
    Alert.alert('ƒê√£ l∆∞u', `ƒê√£ l∆∞u giao d·ªãch cho danh m·ª•c: ${selectedCategoryDetails.name}`);
    router.back();
  };

  // UI cho tr·∫°ng th√°i loading
  if (loadingExpenses) {
    return (
      <SafeAreaView style={styles.screenContainer}>
        <Stack.Screen
          options={{
            title: 'Th√™m',
            headerTitleAlign: 'center',
            headerLeft: () => (
              <TouchableOpacity onPress={() => router.back()} style={styles.headerButton}>
                <Text style={styles.headerButtonTextCancel}>H·ªßy</Text>
              </TouchableOpacity>
            ),
            headerStyle: { backgroundColor: '#FFD700' },
            headerShadowVisible: true,
          }}
        />
        <View style={styles.centeredMessage}>
          <ActivityIndicator size="large" color="#333" />
          <Text style={styles.loadingText}>ƒêang t·∫£i danh m·ª•c...</Text>
        </View>
      </SafeAreaView>
    );
  }

  // UI cho tr·∫°ng th√°i l·ªói (n·∫øu kh√¥ng c√≥ danh m·ª•c n√†o ƒë∆∞·ª£c t·∫£i)
  if (errorExpenses && expenseCats.length === 0) {
    return (
      <SafeAreaView style={styles.screenContainer}>
        <Stack.Screen
          options={{
            title: 'Th√™m',
            headerTitleAlign: 'center',
            headerLeft: () => (
              <TouchableOpacity onPress={() => router.back()} style={styles.headerButton}>
                <Text style={styles.headerButtonTextCancel}>H·ªßy</Text>
              </TouchableOpacity>
            ),
            headerStyle: { backgroundColor: '#FFD700' },
            headerShadowVisible: true,
          }}
        />
        <View style={styles.centeredMessage}>
          <Text style={styles.errorText}>{errorExpenses}</Text>
          {/* B·∫°n c√≥ th·ªÉ th√™m n√∫t "Th·ª≠ l·∫°i" ·ªü ƒë√¢y */}
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.screenContainer}>
      <Stack.Screen
        options={{
          title: 'Th√™m',
          headerTitleAlign: 'center',
          headerLeft: () => (
            <TouchableOpacity onPress={() => router.back()} style={styles.headerButton}>
              <Text style={styles.headerButtonTextCancel}>H·ªßy</Text>
            </TouchableOpacity>
          ),
          headerStyle: { backgroundColor: '#FFD700' },
          headerShadowVisible: true,
        }}
      />
      <AddTransactionUI
        initialTab="Chi ti√™u"
        expenseCategories={expenseCats} // Truy·ªÅn danh m·ª•c chi ti√™u t·ª´ Firebase
        incomeCategories={incomeCats}   // Truy·ªÅn danh m·ª•c thu nh·∫≠p (hi·ªán t·∫°i l√† tƒ©nh)
        onCategorySelect={handleCategorySelect}
        onNewCategoryPress={handleNewCategoryPress}
      />
      {/* N√∫t l∆∞u c√≥ th·ªÉ ƒë·∫∑t ·ªü ƒë√¢y ho·∫∑c trong header */}
      {/* <TouchableOpacity style={styles.saveButton} onPress={handleSaveTransaction}>
        <Text style={styles.saveButtonText}>L∆ØU GIAO D·ªäCH</Text>
      </TouchableOpacity> */}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  screenContainer: {
    flex: 1,
    backgroundColor: '#fff', // Thay ƒë·ªïi m√†u n·ªÅn ƒë·ªÉ ph·∫ßn n·ªôi dung l√† tr·∫Øng
  },
  headerButton: {
    paddingHorizontal: Platform.OS === 'ios' ? 10 : 15,
    paddingVertical: 5,
  },
  headerButtonTextCancel: {
    color: '#FF6347',
    fontSize: 16,
  },
  headerButtonTextSave: { // Style cho n√∫t L∆∞u n·∫øu b·∫°n th√™m v√†o header
    color: '#4CAF50', // M√†u xanh l√° cho n√∫t L∆∞u
    fontSize: 16,
    fontWeight: 'bold',
  },
  centeredMessage: { // Style cho View ch·ª©a ActivityIndicator ho·∫∑c Text l·ªói
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#fff', // ƒê·∫£m b·∫£o n·ªÅn tr·∫Øng
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#555',
  },
  errorText: {
    fontSize: 16,
    color: 'red',
    textAlign: 'center',
  },
});
