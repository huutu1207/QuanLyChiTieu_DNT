// components/AddTransactionUI.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView, // V·∫´n gi·ªØ ScrollView cho c√°c tab kh√¥ng d√πng FlatList
  FlatList,
  Dimensions,
} from 'react-native';

// D·ªØ li·ªáu tƒ©nh cho c√°c danh m·ª•c chi ti√™u (sau s·∫Ω th√¥ng qua csdl)
const defaultExpenseCategories = [
    { id: '1', name: 'Mua s·∫Øm', icon: 'üõí' },
    { id: '2', name: 'ƒê·ªì ƒÉn', icon: 'üçî' },
    { id: '3', name: 'ƒêi·ªán tho·∫°i', icon: 'üì±' },
    { id: '4', name: 'Gi·∫£i tr√≠', icon: 'üé§' },
    { id: '5', name: 'Gi√°o d·ª•c', icon: 'üìñ' },
    { id: '6', name: 'S·∫Øc ƒë·∫πp', icon: 'üíÖ' },
    { id: '7', name: 'Th·ªÉ thao', icon: 'üèä' },
    { id: '8', name: 'X√£ h·ªôi', icon: 'üë•' },
    { id: '9', name: 'V·∫≠n t·∫£i', icon: 'üöå' },
    { id: '10', name: 'Qu·∫ßn √°o', icon: 'üëï' },
    { id: '11', name: 'Xe h∆°i', icon: 'üöó' },
    { id: '12', name: 'R∆∞·ª£u', icon: 'üç∑' },
    { id: '13', name: 'Thu·ªëc l√°', icon: 'üö≠' },
    { id: '14', name: 'Thi·∫øt b·ªã ƒêT', icon: 'üéß' },
    { id: '15', name: 'Du l·ªãch', icon: '‚úàÔ∏è' },
    { id: '16', name: 'S·ª©c kh·ªèe', icon: '‚ù§Ô∏è‚Äçü©π' },
    { id: '17', name: 'Th√∫ c∆∞ng', icon: 'üêæ' },
    { id: '18', name: 'S·ª≠a ch·ªØa', icon: 'üõ†Ô∏è' },
    { id: '19', name: 'Nh√† ·ªü', icon: 'üè†' },
    { id: '20', name: 'Nh√†', icon: 'üè°' },
    { id: '21', name: 'Qu√† t·∫∑ng', icon: 'üéÅ' },
    { id: '22', name: 'Quy√™n g√≥p', icon: 'üíñ' },
    { id: '23', name: 'V√© s·ªë', icon: 'üéüÔ∏è' },
    { id: '24', name: 'ƒê·ªì ƒÉn nh·∫π', icon: 'üç∞' },
    { id: 'add', name: 'Th√™m m·ªõi', icon: '+' },
];

const NUM_COLUMNS = 4;
const SCREEN_WIDTH = Dimensions.get('window').width;

const AddTransactionUI = ({
  initialTab = 'Chi ti√™u',
  expenseCategories = defaultExpenseCategories,
  onCategorySelect,
  onNewCategoryPress,
}) => {
  const [activeTab, setActiveTab] = useState(initialTab);

  // H√†m render c√°c tab l·ª±a ch·ªçn (Chi ti√™u, Thu nh·∫≠p)
  const renderTabs = () => (
    <View style={styles.tabContainer}>
      {['Chi ti√™u', 'Thu nh·∫≠p'].map((tabName) => (
        <TouchableOpacity
          key={tabName}
          style={[
            styles.tabItem,
            activeTab === tabName && styles.activeTabItem,
          ]}
          onPress={() => setActiveTab(tabName)}>
          <Text
            style={[
              styles.tabText,
              activeTab === tabName && styles.activeTabText,
            ]}>
            {tabName}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );

  // H√†m render m·ªôt m·ª•c danh m·ª•c trong l∆∞·ªõi
  const renderCategoryItem = ({ item }) => {
    const isAddButton = item.icon === '+';
    return (
      <TouchableOpacity
        style={styles.categoryItem}
        onPress={() => {
          if (isAddButton && onNewCategoryPress) {
            onNewCategoryPress({ type: activeTab });
          } else if (!isAddButton && onCategorySelect) {
            onCategorySelect({ ...item, transactionType: activeTab });
          }
        }}>
        <View style={[
            styles.iconContainer,
            isAddButton && styles.addButtonIconContainer
        ]}>
          <Text style={[styles.iconText, isAddButton && styles.addButtonIconText]}>{item.icon}</Text>
        </View>
        <Text style={styles.categoryName} numberOfLines={2}>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  // H√†m render n·ªôi dung cho tab "Chi ti√™u" (s·ª≠ d·ª•ng FlatList)
  const renderExpenseContent = () => (
    <FlatList
      data={expenseCategories}
      renderItem={renderCategoryItem}
      keyExtractor={(item) => `expense-${item.id}`} // ƒê·∫£m b·∫£o key l√† duy nh·∫•t
      numColumns={NUM_COLUMNS}
      contentContainerStyle={styles.categoryList}
    />
  );

  // H√†m render n·ªôi dung cho tab "Thu nh·∫≠p"
  const renderIncomeContent = () => (
    // Dungf view cu·ªôn
    <ScrollView style={styles.scrollViewForSimpleContent}>
      <View style={styles.contentContainer}>
        <Text>Giao di·ªán nh·∫≠p Thu nh·∫≠p (ch∆∞a tri·ªÉn khai)</Text>
      </View>
    </ScrollView>
  );


  // H√†m ch√≠nh ƒë·ªÉ render n·ªôi dung c·ªßa tab ƒëang active
  const renderActiveTabContent = () => {
    switch (activeTab) {
      case 'Chi ti√™u':
        return renderExpenseContent(); // Tr·∫£ v·ªÅ FlatList tr·ª±c ti·∫øp
      case 'Thu nh·∫≠p':
        return renderIncomeContent(); // Tr·∫£ v·ªÅ ScrollView b·ªçc n·ªôi dung
      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      {renderTabs()}
      {/* View n√†y s·∫Ω ch·ª©a n·ªôi dung c·ªßa tab, ƒë·∫£m b·∫£o FlatList c√≥ kh√¥ng gian ƒë·ªÉ m·ªü r·ªông */}
      <View style={styles.tabContentContainer}>
        {renderActiveTabContent()}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFD700',
  },
  tabItem: {
    flex: 1,
    paddingVertical: 15,
    alignItems: 'center',
    justifyContent: 'center',
    borderBottomWidth: 3,
    borderBottomColor: 'transparent',
  },
  activeTabItem: {
    borderBottomColor: '#333',
  },
  tabText: {
    fontSize: 15,
    fontWeight: '500',
    color: '#555',
  },
  activeTabText: {
    color: '#000',
    fontWeight: 'bold',
  },
  // Container cho n·ªôi dung c·ªßa tab, ƒë·∫£m b·∫£o n√≥ chi·∫øm kh√¥ng gian c√≤n l·∫°i
  tabContentContainer: {
    flex: 1,
  },
  // Style cho ScrollView khi n·ªôi dung tab ƒë∆°n gi·∫£n (kh√¥ng ph·∫£i FlatList)
  scrollViewForSimpleContent: {
    flex: 1, // ƒê·∫£m b·∫£o ScrollView c≈©ng chi·∫øm kh√¥ng gian
  },
  // Style cho View b√™n trong ScrollView (n·∫øu c·∫ßn padding chung)
  contentContainer: {
    padding: 20,
    alignItems: 'center', // Ho·∫∑c t√πy ch·ªânh theo layout c·ªßa b·∫°n
  },
  // Style cho FlatList (danh s√°ch danh m·ª•c)
  categoryList: {
    paddingHorizontal: 8,
    paddingTop: 16,
    // paddingBottom quan tr·ªçng n·∫øu b·∫°n mu·ªën c√≥ kho·∫£ng tr·ªëng ·ªü cu·ªëi FlatList
    paddingBottom: 16,
  },
  categoryItem: {
    width: (SCREEN_WIDTH - 16) / NUM_COLUMNS - 10, // (SCREEN_WIDTH - paddingNgangCuaList*2) / s·ªë_c·ªôt - marginNgangCuaItem*2
    alignItems: 'center',
    marginBottom: 20,
    marginHorizontal: 5,
  },
  iconContainer: {
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  addButtonIconContainer: {
    backgroundColor: '#e0e0e0',
  },
  iconText: {
    fontSize: 26,
  },
  addButtonIconText: {
    fontSize: 30,
    color: '#555',
  },
  categoryName: {
    fontSize: 12,
    textAlign: 'center',
    color: '#333',
    height: 30,
  },
});

export default AddTransactionUI;
