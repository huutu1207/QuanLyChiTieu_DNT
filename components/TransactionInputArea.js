// components/TransactionInputArea.js
import { useEffect, useState } from 'react';
import {
    Dimensions,
    Platform,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View,
} from 'react-native';
// B·∫°n c√≥ th·ªÉ c·∫ßn th∆∞ vi·ªán n√†y ƒë·ªÉ ch·ªçn ng√†y
import DateTimePickerModal from "react-native-modal-datetime-picker";

// L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ t√≠nh to√°n layout
const { width } = Dimensions.get('window');
const KEYPAD_BUTTON_WIDTH = (width - 20 * 2 - 10 * 3) / 4; // (screenWidth - 2*paddingHorizontal - 3*gap) / 4 columns
const KEYPAD_BUTTON_HEIGHT = KEYPAD_BUTTON_WIDTH * 0.7; // Gi·ªØ t·ª∑ l·ªá cho n√∫t

const TransactionInputArea = ({
    selectedCategory, // { name: string, icon: string }
    initialAmount = '0',
    initialNote = '',
    onSaveTransaction, // (details: { amount: number, note: string, date: Date }) => void
    onCancelTransaction, // () => void
    // onDateChange, // (date: Date) => void // N·∫øu b·∫°n mu·ªën component n√†y qu·∫£n l√Ω ng√†y
}) => {
    const [amount, setAmount] = useState(initialAmount === '0' || !initialAmount ? '' : initialAmount); // ƒê·ªÉ placeholder ho·∫°t ƒë·ªông
    const [note, setNote] = useState(initialNote);
    const [currentDate, setCurrentDate] = useState(new Date());
    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);

    useEffect(() => {
        // N·∫øu initialAmount l√† '0' ho·∫∑c r·ªóng, hi·ªÉn th·ªã placeholder '0'
        // N·∫øu c√≥ gi√° tr·ªã, hi·ªÉn th·ªã gi√° tr·ªã ƒë√≥
        setAmount(initialAmount === '0' || !initialAmount ? '' : initialAmount);
        setNote(initialNote);
    }, [initialAmount, initialNote]);


    const handleKeyPress = (key) => {
        if (key === '‚å´') { // Backspace
            setAmount(prevAmount => prevAmount.slice(0, -1));
        } else if (key === ',') { // Decimal point
            if (!amount.includes(',')) {
                setAmount(prevAmount => prevAmount + ',');
            }
        } else { // Digit
            if (amount.length < 12) { // Gi·ªõi h·∫°n ƒë·ªô d√†i s·ªë ti·ªÅn
                // N·∫øu amount ƒëang l√† r·ªóng ho·∫∑c '0', v√† ng∆∞·ªùi d√πng nh·∫≠p s·ªë kh√°c 0
                if ((amount === '' || amount === '0') && key !== '0' && key !== ',') {
                    setAmount(key);
                } else if (amount !== '' || key !== '0') { // Cho ph√©p nh·∫≠p s·ªë 0 n·∫øu ƒë√£ c√≥ s·ªë kh√°c
                    setAmount(prevAmount => prevAmount + key);
                }
            }
        }
    };

    const handleSave = () => {
        const numericAmount = parseFloat(amount.replace(',', '.')) || 0; // Thay th·∫ø d·∫•u ph·∫©y n·∫øu c√≥
        if (numericAmount <= 0) {
            alert('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá.');
            return;
        }
        if (onSaveTransaction) {
            onSaveTransaction({
                amount: numericAmount,
                note: note.trim(),
                date: currentDate,
                category: selectedCategory, // G·ª≠i k√®m th√¥ng tin danh m·ª•c ƒë√£ ch·ªçn
            });
        }
    };

    const showDatePicker = () => {
        setDatePickerVisibility(true);
    };

    const hideDatePicker = () => {
        setDatePickerVisibility(false);
    };

    const handleConfirmDate = (date) => {
        setCurrentDate(date);
        if (onDateChange) {
            onDateChange(date);
        }
        hideDatePicker();
    };

    const formatAmountForDisplay = () => {
        if (amount === '') return '0';
        // B·∫°n c√≥ th·ªÉ th√™m logic ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn ·ªü ƒë√¢y (v√≠ d·ª•: 1000000 -> 1.000.000)
        return amount;
    };


    const keypadLayout = [
        ['7', '8', '9', 'üóìÔ∏è'],
        ['4', '5', '6', '+'],
        ['1', '2', '3', '-'],
        [',', '0', '‚å´', '‚úì'],
    ];

    return (
        <View style={styles.container}>
            {/* Hi·ªÉn th·ªã th√¥ng tin danh m·ª•c v√† s·ªë ti·ªÅn */}
            <View style={styles.displayArea}>
                <View style={styles.categoryDisplay}>
                    <Text style={styles.categoryIcon}>{selectedCategory?.icon || 'üí∏'}</Text>
                    <Text style={styles.categoryName}>{selectedCategory?.name || 'Chi ti√™u'}</Text>
                </View>
                <Text style={styles.amountText} numberOfLines={1} adjustsFontSizeToFit>
                    {formatAmountForDisplay()}
                </Text>
            </View>

            {/* Tr∆∞·ªùng nh·∫≠p ghi ch√∫ */}
            <View style={styles.noteInputContainer}>
                <TextInput
                    style={styles.noteInput}
                    placeholder="Ghi ch√∫ : Nh·∫≠p ghi ch√∫ ..."
                    placeholderTextColor="#888"
                    value={note}
                    onChangeText={setNote}
                    maxLength={100}
                />
                {/* Icon camera (ch∆∞a c√≥ ch·ª©c nƒÉng) */}
                <TouchableOpacity style={styles.cameraIconContainer}>
                    <Text style={styles.cameraIcon}>üì∑</Text>
                </TouchableOpacity>
            </View>

            {/* B√†n ph√≠m t√πy ch·ªânh */}
            <View style={styles.keypadContainer}>
                {keypadLayout.map((row, rowIndex) => (
                    <View key={`row-${rowIndex}`} style={styles.keypadRow}>
                        {row.map((key) => {
                            const isActionKey = ['üóìÔ∏è', '+', '-', '‚úì'].includes(key);
                            const isConfirmKey = key === '‚úì';
                            const isBackspaceKey = key === '‚å´';
                            const isDateKey = key === 'üóìÔ∏è';

                            return (
                                <TouchableOpacity
                                    key={`key-${key}`}
                                    style={[
                                        styles.keypadButton,
                                        isActionKey && styles.actionKeyButton,
                                        isConfirmKey && styles.confirmKeyButton,
                                        isDateKey && styles.dateKeyButton,
                                    ]}
                                    onPress={() => {
                                        if (isConfirmKey) {
                                            handleSave();
                                        } else if (isDateKey) {
                                            showDatePicker();
                                            alert('Ch·ª©c nƒÉng ch·ªçn ng√†y ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh.');
                                        } else if (['+', '-'].includes(key)) {
                                            alert(`Ch·ª©c nƒÉng ph√©p to√°n '${key}' ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai.`);
                                        }
                                        else {
                                            handleKeyPress(key);
                                        }
                                    }}
                                >
                                    <Text style={[
                                        styles.keypadButtonText,
                                        isActionKey && styles.actionKeyText,
                                        isConfirmKey && styles.confirmKeyText,
                                    ]}>
                                        {key}
                                    </Text>
                                </TouchableOpacity>
                            );
                        })}
                    </View>
                ))}
            </View>

            <DateTimePickerModal
                isVisible={isDatePickerVisible}
                mode="date"
                onConfirm={handleConfirmDate}
                onCancel={hideDatePicker}
                date={currentDate} // Ng√†y hi·ªán t·∫°i ƒë∆∞·ª£c ch·ªçn
            />
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#F0F0F0', // M√†u n·ªÅn nh·∫°t cho to√†n b·ªô khu v·ª±c
        paddingHorizontal: 20,
        paddingTop: 10, // Gi·∫£m padding top
        paddingBottom: Platform.OS === 'ios' ? 20 : 10, // Th√™m padding bottom cho iOS
    },
    displayArea: {
        marginBottom: 15,
        paddingHorizontal: 10,
        paddingVertical: 10,
        backgroundColor: '#FFFFFF',
        borderRadius: 8,
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 1,
        },
        shadowOpacity: 0.18,
        shadowRadius: 1.00,
        elevation: 1,
    },
    categoryDisplay: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 5,
    },
    categoryIcon: {
        fontSize: 24,
        marginRight: 8,
    },
    categoryName: {
        fontSize: 16,
        color: '#555',
        fontWeight: '500',
    },
    amountText: {
        fontSize: 36, // K√≠ch th∆∞·ªõc l·ªõn cho s·ªë ti·ªÅn
        fontWeight: 'bold',
        color: '#2E8B57', // M√†u xanh l√° c√¢y cho s·ªë ti·ªÅn
        textAlign: 'right', // CƒÉn ph·∫£i s·ªë ti·ªÅn
        minHeight: 45, // ƒê·∫£m b·∫£o chi·ªÅu cao t·ªëi thi·ªÉu
    },
    noteInputContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#FFFFFF',
        borderRadius: 8,
        paddingHorizontal: 10,
        marginBottom: 15, // TƒÉng kho·∫£ng c√°ch v·ªõi b√†n ph√≠m
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 1,
        },
        shadowOpacity: 0.18,
        shadowRadius: 1.00,
        elevation: 1,
    },
    noteInput: {
        flex: 1,
        height: 50, // TƒÉng chi·ªÅu cao
        fontSize: 15,
        color: '#333',
    },
    cameraIconContainer: {
        padding: 8,
    },
    cameraIcon: {
        fontSize: 24,
    },
    keypadContainer: {
        // flex: 1, // ƒê·ªÉ b√†n ph√≠m chi·∫øm ph·∫ßn c√≤n l·∫°i
        // justifyContent: 'flex-end', // ƒê·∫©y b√†n ph√≠m xu·ªëng d∆∞·ªõi n·∫øu kh√¥ng flex:1
    },
    keypadRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: 10, // Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng n√∫t
    },
    keypadButton: {
        width: KEYPAD_BUTTON_WIDTH,
        height: KEYPAD_BUTTON_HEIGHT,
        backgroundColor: '#FFFFFF', // M√†u n·ªÅn tr·∫Øng cho n√∫t th∆∞·ªùng
        borderRadius: 8,
        justifyContent: 'center',
        alignItems: 'center',
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 1,
        },
        shadowOpacity: 0.20,
        shadowRadius: 1.41,
        elevation: 2,
    },
    keypadButtonText: {
        fontSize: 22, // K√≠ch th∆∞·ªõc ch·ªØ l·ªõn h∆°n
        color: '#333', // M√†u ch·ªØ ƒë·∫≠m
        fontWeight: '500',
    },
    actionKeyButton: {
        backgroundColor: '#E0E0E0', // M√†u n·ªÅn kh√°c cho n√∫t ch·ª©c nƒÉng
    },
    actionKeyText: {
        // color: '#333', // C√≥ th·ªÉ gi·ªØ m√†u ch·ªØ m·∫∑c ƒë·ªãnh ho·∫∑c thay ƒë·ªïi
        fontSize: 16, // Ch·ªØ nh·ªè h∆°n cho n√∫t ch·ª©c nƒÉng
    },
    dateKeyButton: {
        backgroundColor: '#FFFACD', // M√†u v√†ng nh·∫°t cho n√∫t "H√¥m nay"
    },
    confirmKeyButton: {
        backgroundColor: '#2E8B57', // M√†u xanh l√° cho n√∫t x√°c nh·∫≠n
    },
    confirmKeyText: {
        color: '#FFFFFF', // Ch·ªØ tr·∫Øng cho n√∫t x√°c nh·∫≠n
        fontSize: 24, // Ch·ªØ to h∆°n cho n√∫t x√°c nh·∫≠n
        fontWeight: 'bold',
    },
});

export default TransactionInputArea;
